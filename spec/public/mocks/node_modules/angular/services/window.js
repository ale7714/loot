{
	/**
	 * Implementation
	 */
	class WindowMockProvider {
		constructor($qMockProvider) {
			const success = {
							args: "good-script",
							response: {scope: "test scope"}
						},
						error = {
							args: "bad-script",
							response: "test error"
						},
						$q = $qMockProvider.$get();

			// Mock $window object
			this.$window = {
				localStorage: {
					getItem: sinon.stub(),
					removeItem: sinon.stub(),
					setItem: sinon.stub()
				},
				sessionStorage: {
					getItem: sinon.stub(),
					removeItem: sinon.stub(),
					setItem: sinon.stub()
				},
				btoa: sinon.stub().returns("base64 encoded"),
				navigator: {
					serviceWorker: {
						register: $q.promisify(success, error)
					}
				},
				console: {
					log: sinon.stub()
				}
			};

			// Configure stub responses
			this.$window.localStorage.getItem.withArgs("lootClosingBalance-1").returns(1000);
		}

		$get() {
			// Return the mock $window object
			return this.$window;
		}
	}

	/**
	 * Registration
	 */
	angular
		.module("ogAngularMocks")
		.provider("$windowMock", WindowMockProvider);

	/**
	 * Dependencies
	 */
	WindowMockProvider.$inject = ["$qMockProvider"];
}
