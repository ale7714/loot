{
	/**
	 * Implementation
	 */
	class Provider {
		constructor() {
			// Mock $uibModal object
			this.$uibModal = {
				open(options) {
					const self = this;

					// If there are any resolves, resolve them
					if (options.resolve) {
						this.resolves = Object.keys(options.resolve).reduce((resolves, resolve) => {
							resolves[resolve] = options.resolve[resolve]();
							return resolves;
						}, {});
					}

					// Return a result object that is promise-like, but instead of invoking the callbacks it just stores them
					// for later use by close() and dismiss()
					return {
						result: {
							then(callback) {
								// Store the callback
								self.closeCallback = callback;
								return this;
							},
							catch(callback) {
								self.catchCallback = callback;
								return this;
							},
							finally(callback) {
								self.finallyCallback = callback;
								return this;
							}
						}
					};
				},
				close(value) {
					this.callbackResult = this.closeCallback(value);
					if (this.finallyCallback) {
						this.callbackResult = this.finallyCallback(this.callbackResult);
					}

					return this.callbackResult;
				},
				dismiss() {
					if (this.catchCallback) {
						this.callbackResult = this.catchCallback();
					}

					if (this.finallyCallback) {
						this.callbackResult = this.finallyCallback(this.callbackResult);
					}

					return this.callbackResult;
				}
			};

			// Spy on open()
			sinon.spy(this.$uibModal, "open");
		}

		$get() {
			return this.$uibModal;
		}
	}

	/**
	 * Registration
	 */
	angular
		.module("ogAngularMocks")
		.provider("$uibModalMock", Provider);

	/**
	 * Dependencies
	 */
	Provider.$inject = [];
}
